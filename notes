my interpretations on angular internals:
angular lib's top level object is an module, ex)

var demoApp = angular.module('demoApp', ['other-dependency-module-1', 'other-dependency-module-2'])

you can think of each module object as a typical js object, with the following fields:
controller, config, ...

controller object is a hash table, maps controller name string to a function($scope).
$scope is the glue between controller and view.

ex)
var controllers = {}
controllers.myController1 = function($scope) {...}
controllers.myController2 = function($scope) {...}
demoApp.controller(controllers)  // notice this is a constructor call. it initializes controller with the given controllers objects which is a HT of functions.

then in .html file, use <html ng-app='demoApp'>, <div ng-controller='myController1'>, etc.

similarly, config is another object, that lets you specify multiple functions, such as routing.

ng-model binds variable to scope.
ex)
in view.html, if you write:
<input type="text" ng-model="foo"><input>
then whatever you type into thix input box, $scope will have a field named foo with that value.
e.g. if you type in 'hello', then $scope.foo='hello'
this is handy because it links data between view and controller
